---
alwaysApply: true
description: Project structure and organization guidelines for the Study Ticket Flow system
---

# Project Structure Guidelines

## Directory Organization

### Core Structure
```
src/
├── components/           # UI Components
│   ├── ui/              # shadcn/ui components (auto-generated)
│   └── ...              # Custom components
├── pages/               # Page components (routes)
├── services/            # Business logic layer
├── hooks/               # Custom React hooks
├── lib/                 # Utilities and helpers
├── integrations/        # External service integrations
└── db/                  # Database schema and client
```

### File Naming Conventions
- **Components**: PascalCase (`TicketList.tsx`, `StatsCards.tsx`)
- **Services**: camelCase (`ticketService.ts`, `authService.ts`)
- **Pages**: PascalCase (`Dashboard.tsx`, `TicketDetail.tsx`)
- **Hooks**: camelCase (`use-mobile.tsx`, `use-toast.ts`)
- **Utils**: camelCase (`utils.ts`)
- **Database**: camelCase (`schema.ts`, `client.ts`)

## Import Organization

```typescript
// 1. React imports
import React from 'react';

// 2. Third-party libraries (alphabetical)
import { useQuery } from '@tanstack/react-query';
import { formatDistanceToNow } from 'date-fns';

// 3. UI components (shadcn/ui)
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

// 4. Local components (relative or absolute)
import { Navbar } from '@/components/Navbar';

// 5. Services, hooks, utils
import { TicketService } from '@/services/ticketService';
import { useToast } from '@/hooks/use-toast';

// 6. Types and interfaces
import type { Ticket } from '@/services/ticketOperationsService';
```

## Path Aliases
- Use `@/` for `src/` directory imports
- Prefer absolute imports over relative imports
- Only use relative imports for closely related files in the same directory

## Component Structure
```typescript
import { FC } from 'react';

interface ComponentNameProps {
  // Define props interface
}

export const ComponentName: FC<ComponentNameProps> = ({
  prop1,
  prop2
}) => {
  // Custom hooks at the top
  // State management
  // Event handlers
  // Effects

  return (
    // JSX
  );
};
```