---
globs: *.tsx
description: React component patterns and best practices for the Study Ticket Flow application
---

# React Component Patterns

## Component Architecture

### Functional Components with TypeScript
```typescript
import { FC, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

interface TicketListProps {
  userId: string;
  limit?: number;
}

export const TicketList: FC<TicketListProps> = ({
  userId,
  limit = 10
}) => {
  const navigate = useNavigate();
  const [tickets, setTickets] = useState<Ticket[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // Effects at the top
  useEffect(() => {
    fetchTickets();
  }, [userId, limit]);

  // Event handlers
  const handleTicketClick = (ticketId: string) => {
    navigate(`/tickets/${ticketId}`);
  };

  // Helper functions
  const fetchTickets = async () => {
    try {
      const ticketList = await TicketOperationsService.getTickets({ limit });
      setTickets(ticketList);
    } catch (error) {
      console.error('Failed to fetch tickets:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Conditional rendering
  if (isLoading) {
    return <TicketListSkeleton />;
  }

  if (tickets.length === 0) {
    return <EmptyState />;
  }

  return (
    <div className="space-y-3">
      {tickets.map((ticket) => (
        <TicketCard
          key={ticket.id}
          ticket={ticket}
          onClick={() => handleTicketClick(ticket.id)}
        />
      ))}
    </div>
  );
};
```

## State Management

### React Query for Server State
```typescript
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

// Fetching data
const { data: tickets, isLoading, error } = useQuery({
  queryKey: ['tickets', { status, priority }],
  queryFn: () => TicketOperationsService.getTickets({ status, priority }),
  staleTime: 5 * 60 * 1000, // 5 minutes
});

// Mutations with optimistic updates
const queryClient = useQueryClient();

const createTicketMutation = useMutation({
  mutationFn: (data: TicketFormData) =>
    TicketService.createTicket(data, userId),
  onSuccess: (newTicket) => {
    // Optimistic update
    queryClient.setQueryData(['tickets'], (old: Ticket[]) => [
      newTicket,
      ...(old || [])
    ]);

    toast({
      title: "Success",
      description: "Ticket created successfully!",
    });
  },
  onError: (error) => {
    toast({
      title: "Error",
      description: "Failed to create ticket. Please try again.",
      variant: "destructive",
    });
  }
});
```

## Form Handling

### React Hook Form with Zod Validation
```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

const ticketSchema = z.object({
  title: z.string().min(1, 'Title is required').max(100, 'Title too long'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  type: z.enum(['bug', 'feature', 'question', 'task']),
  priority: z.enum(['low', 'medium', 'high', 'critical']),
});

type TicketFormData = z.infer<typeof ticketSchema>;

export const NewTicketForm = () => {
  const form = useForm<TicketFormData>({
    resolver: zodResolver(ticketSchema),
    defaultValues: {
      type: 'task',
      priority: 'medium',
    },
  });

  const onSubmit = (data: TicketFormData) => {
    createTicketMutation.mutate(data);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input placeholder="Enter ticket title..." {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* Other form fields */}
      </form>
    </Form>
  );
};
```

## Styling Patterns

### Tailwind CSS with shadcn/ui
```typescript
// Badge color variants based on status/priority
const getPriorityColor = (priority: string) => {
  const colors = {
    low: "bg-blue-500/10 text-blue-500 border-blue-500/20",
    medium: "bg-yellow-500/10 text-yellow-500 border-yellow-500/20",
    high: "bg-orange-500/10 text-orange-500 border-orange-500/20",
    critical: "bg-red-500/10 text-red-500 border-red-500/20",
  };
  return colors[priority as keyof typeof colors] || colors.medium;
};

// Responsive design patterns
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* Content */}
</div>

// Hover and transition effects
<div className="p-4 border rounded-lg hover:border-primary hover:shadow-md transition-all cursor-pointer bg-card">
  {/* Content */}
</div>
```

## Educational Components

### Role-Based Component Rendering
```typescript
// components/EducationalComponent.tsx
import { useAuth } from '@/hooks/useAuth';
import { ROLE_PERMISSIONS } from '@/types/userRoles';

interface EducationalComponentProps {
  children: React.ReactNode;
  requiredPermission?: keyof typeof ROLE_PERMISSIONS.student;
  fallback?: React.ReactNode;
}

export const EducationalComponent = ({
  children,
  requiredPermission,
  fallback = null
}: EducationalComponentProps) => {
  const { user } = useAuth();

  if (!user?.role) return fallback;

  if (requiredPermission) {
    const hasPermission = ROLE_PERMISSIONS[user.role as keyof typeof ROLE_PERMISSIONS]?.[requiredPermission];
    if (!hasPermission) return fallback;
  }

  return <>{children}</>;
};

// Usage
<EducationalComponent requiredPermission="canViewAnalytics">
  <AdvancedAnalyticsDashboard />
</EducationalComponent>
```

### Course Context Provider
```typescript
// components/providers/CourseContext.tsx
import { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';

interface CourseContextType {
  currentCourse: Course | null;
  currentClass: Class | null;
  setCourse: (course: Course) => void;
  setClass: (cls: Class) => void;
  availableCourses: Course[];
  availableClasses: Class[];
}

const CourseContext = createContext<CourseContextType | undefined>(undefined);

export const CourseProvider = ({ children }: { children: React.ReactNode }) => {
  const { user } = useAuth();
  const [currentCourse, setCurrentCourse] = useState<Course | null>(null);
  const [currentClass, setCurrentClass] = useState<Class | null>(null);
  const [availableCourses, setAvailableCourses] = useState<Course[]>([]);
  const [availableClasses, setAvailableClasses] = useState<Class[]>([]);

  useEffect(() => {
    if (user) {
      loadUserCourses();
    }
  }, [user]);

  const loadUserCourses = async () => {
    if (!user) return;

    let courses: Course[] = [];

    switch (user.role) {
      case 'student':
        courses = await StudentService.getEnrolledCourses(user.id);
        break;
      case 'instructor':
      case 'lead':
        courses = await InstructorService.getAssignedCourses(user.id);
        break;
      case 'manager':
        courses = await ManagerService.getManagedCourses(user.id);
        break;
      default:
        courses = [];
    }

    setAvailableCourses(courses);

    // Auto-select first course if available
    if (courses.length > 0 && !currentCourse) {
      setCurrentCourse(courses[0]);
    }
  };

  const value = {
    currentCourse,
    currentClass,
    setCourse: setCurrentCourse,
    setClass: setCurrentClass,
    availableCourses,
    availableClasses,
  };

  return (
    <CourseContext.Provider value={value}>
      {children}
    </CourseContext.Provider>
  );
};

export const useCourse = () => {
  const context = useContext(CourseContext);
  if (context === undefined) {
    throw new Error('useCourse must be used within a CourseProvider');
  }
  return context;
};
```

## Custom Hooks

### Educational Data Hooks
```typescript
// hooks/useEducationalTickets.ts
import { useQuery } from '@tanstack/react-query';
import { useCourse } from '@/components/providers/CourseContext';
import { TicketOperationsService } from '@/services/ticketOperationsService';

export const useEducationalTickets = (filters?: EducationalTicketFilters) => {
  const { currentCourse, currentClass } = useCourse();

  return useQuery({
    queryKey: ['educational-tickets', currentCourse?.id, currentClass?.id, filters],
    queryFn: () => TicketOperationsService.getEducationalTickets({
      courseId: currentCourse?.id,
      classId: currentClass?.id,
      ...filters,
    }),
    enabled: !!currentCourse,
    staleTime: 2 * 60 * 1000, // 2 minutes
  });
};

// hooks/useAnalytics.ts
import { useQuery } from '@tanstack/react-query';
import { useAuth } from '@/hooks/useAuth';
import { AnalyticsService } from '@/services/analyticsService';

export const useAnalytics = (timeRange: TimeRange = 'current_semester') => {
  const { user } = useAuth();

  return useQuery({
    queryKey: ['analytics', user?.id, user?.role, timeRange],
    queryFn: () => AnalyticsService.getAnalyticsDashboard(
      user!.id,
      user!.role as UserRole,
      { timeRange }
    ),
    enabled: !!user,
    staleTime: 10 * 60 * 1000, // 10 minutes
  });
};

// hooks/useAuth.ts
import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

export const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
      setLoading(false);
    };

    getUser();

    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        setUser(session?.user ?? null);
        setLoading(false);
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  return { user, loading };
};
```

## Performance Optimization

### React.memo for Expensive Components
```typescript
import { memo } from 'react';

interface TicketCardProps {
  ticket: Ticket;
  onClick: (id: string) => void;
}

export const TicketCard = memo<TicketCardProps>(({ ticket, onClick }) => {
  return (
    <div onClick={() => onClick(ticket.id)}>
      {/* Content */}
    </div>
  );
});
```

### useCallback for Event Handlers
```typescript
import { useCallback } from 'react';

const handleTicketClick = useCallback((ticketId: string) => {
  navigate(`/tickets/${ticketId}`);
}, [navigate]);
```